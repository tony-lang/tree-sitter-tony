/// <reference types="tree-sitter-cli/dsl" />

import {
  _assignable_pattern,
  _literal_pattern,
  _pattern,
  binding_pattern,
  destructuring_pattern,
  list_pattern,
  member_pattern,
  pattern_group,
  root_binding_pattern,
  struct_pattern,
  tag_pattern,
  tuple_pattern,
  wildcard_pattern,
} from '../common/patterns'
import {
  _decimal,
  _integer,
  _literal,
  boolean,
  escape_sequence,
  interpolation,
  number,
  raw_string,
  regex,
  regex_flags,
  regex_pattern,
  string,
} from '../common/literals'
import {
  _element,
  _identifier_without_operators,
  _immediate_block,
  _operator,
  _section,
  _section_identifier,
  _term,
  access,
  application,
  argument,
  assignment,
  block,
  case_,
  class_,
  class_member,
  conditional,
  data,
  export_,
  extends_type,
  function_,
  function_type,
  group,
  hole,
  identifier,
  infix_application,
  instance,
  keyof_type,
  left_section,
  list,
  list_comprehension,
  generator,
  map_type,
  member,
  optional_type,
  pure,
  return_,
  right_section,
  spread,
  static_application,
  static_function,
  struct,
  tag,
  tuple,
  type,
  type_hint,
  when,
} from '../common/terms'
import {
  _import_body_constructor,
  exported_import,
  import_,
  import_identifier,
  import_type,
} from '../common/imports'
import { comment, hash_bang_line } from '../common/miscellaneous'
import { Dialect } from '../common/dialects'
import { precedences } from '../common/precedences'

const dialect = Dialect.Tony

export = grammar({
  name: 'tony',

  externals: ($) => [
    $._newline,
    $._string_start,
    $._string_content,
    $._string_end,
  ],

  extras: ($) => [$.comment, /\s/],

  word: ($) => $._identifier_without_operators,

  conflicts: ($) => [
    [$._term, $.binding_pattern],
    [$._term, $.root_binding_pattern],
    [$.binding_pattern, $.root_binding_pattern],
    [$._term, $.binding_pattern, $.root_binding_pattern],

    [$.member, $.binding_pattern],
    [$.member, $.class_member, $.binding_pattern],

    [$.list, $.list_pattern],
    [$.struct, $.struct_pattern],
    [$.tuple, $.tuple_pattern],
    [$._literal, $._literal_pattern],

    [$.raw_string, $.string],

    [$.group, $._element],
    [$.argument, $.tuple],

    // investigate
    [$.static_application, $.infix_application],
    [$._term, $.struct, $.binding_pattern],
    [$.import_type, $.binding_pattern],
    [$.import_identifier, $.binding_pattern],
  ],

  precedences,

  rules: {
    program: ($) =>
      seq(
        optional(seq(field('hashBangLine', $.hash_bang_line), $._newline)),
        repeat(
          seq(field('import', choice($.import, $.exported_import)), $._newline),
        ),
        repeat(seq(field('term', $._term), $._newline)),
      ),

    hash_bang_line,
    comment,

    import: import_,
    exported_import,
    _import_body: _import_body_constructor(dialect),
    import_identifier,
    import_type,

    _term,
    block,
    export: export_,
    assignment,
    class: class_,
    class_member,
    instance,
    argument,
    function: function_,
    application,
    infix_application,
    _section,
    left_section,
    right_section,
    _section_identifier,
    list_comprehension,
    generator,
    access,
    return: return_,
    static_application,
    static_function,
    extends_type,
    conditional,
    _immediate_block,
    case: case_,
    when,
    struct,
    member,
    tuple,
    list,
    _element,
    spread,
    pure,
    hole,
    type_hint,
    data,
    tag,
    function_type,
    optional_type,
    map_type,
    keyof_type,
    type,
    _identifier_without_operators,
    _operator,
    identifier,
    group,

    _pattern,
    _assignable_pattern,
    destructuring_pattern,
    struct_pattern,
    tuple_pattern,
    list_pattern,
    member_pattern,
    binding_pattern,
    root_binding_pattern,
    wildcard_pattern,
    tag_pattern,
    _literal_pattern,
    pattern_group,

    _literal,
    boolean,
    _decimal,
    _integer,
    number,
    raw_string,
    string,
    interpolation,
    escape_sequence,
    regex,
    regex_pattern,
    regex_flags,
  },
})
