==================
map
==================

{}
{ a, b }
{ ['a']: 1, ...b, c: 'str', d, e }

---

(program
  (map)
  (map
    (shorthand_pair_identifier)
    (shorthand_pair_identifier))
  (map
    (expression_pair
      left: (string)
      right: (number))
    (spread
      value: (identifier))
    (expression_pair
      left: (shorthand_access_identifier)
      right: (string))
    (shorthand_pair_identifier)
    (shorthand_pair_identifier)))

==================
tuple
==================

(a, 1, ...b, 'str')
(1,1)

---

(program
  (tuple
    (identifier)
    (number)
    (spread
      value: (identifier))
    (string))
  (tuple
    (number)
    (number)))

==================
list
==================

[]
[a, 1, ...b, 'str']
[1,1..1,1]

---

(program
  (list)
  (list
    (identifier)
    (number)
    (spread
      value: (identifier))
    (string))
  (list
    (number)
    (infix_application
      left: (number)
      abstraction: (infix_application_operator)
      right: (number))
    (number)))

==================
type
==================

a :: Type := 1
a :: 5aA0Z := 1
a :: _Type := 1

---

(program
  (assignment
    left: (identifier_pattern)
    type: (type)
    right: (number))
  (assignment
    left: (identifier_pattern)
    type: (type)
    right: (number))
  (assignment
    left: (identifier_pattern)
    type: (type)
    right: (number)))

==================
map type
==================

a :: { Type: Type } := 1

---

(program
  (assignment
    left: (identifier_pattern)
    type: (map_type
      left: (type)
      right: (type))
    right: (number)))

==================
tuple type
==================

a :: (Type, Type) := 1

---

(program
  (assignment
    left: (identifier_pattern)
    type: (tuple_type
      (type)
      (type))
    right: (number)))

==================
list type
==================

a :: [Type] := 1

---

(program
  (assignment
    left: (identifier_pattern)
    type: (list_type
      type: (type))
    right: (number)))

==================
boolean
==================

false
true

---

(program
  (boolean)
  (boolean))

==================
decimal
==================

-0.6_6
+0.1_1
123.4123
1_1.3_1
1_1.0
1e3_4
0.3e1_4
1e322
1e-3
1e3
1.8e10
1.0e10
-1e10

---

(program
  (prefix_application
    abstraction: (identifier)
    argument: (number))
  (prefix_application
    abstraction: (identifier)
    argument: (number))
  (number)
  (number)
  (number)
  (number)
  (number)
  (number)
  (number)
  (number)
  (number)
  (number)
  (prefix_application
    abstraction: (identifier)
    argument: (number)))

==================
integer
==================

-1
0xDEAD
0o123
0b001
1_1
0x1_1
0o1_1
0b1_1

---

(program
  (prefix_application
    abstraction: (identifier)
    argument: (number))
  (number)
  (number)
  (number)
  (number)
  (number)
  (number)
  (number))

=====================================
identifier
=====================================

abs
a5_ds_
_abs?
+
\
||
/

---

(program
  (identifier)
  (identifier)
  (identifier)
  (identifier)
  (identifier)
  (identifier)
  (identifier))

=====================================
string
=====================================

"I'm ok"
'"ok"'
"\\"
"/"
"multiline \
string"
'{func}'

---

(program
  (string)
  (string)
  (string
    (escape_sequence))
  (string)
  (string
    (escape_sequence))
  (string
    (interpolation
      value: (identifier))))

=====================================
regex
=====================================

/one\\/
/one/g
/one/i
/one/gim
/on\/e/gim
/on[^/]afe/gim
/[\]/]/

---

(program
  (regex
    (regex_pattern))
  (regex
    (regex_pattern)
    (regex_flags))
  (regex
    (regex_pattern)
    (regex_flags))
  (regex
    (regex_pattern)
    (regex_flags))
  (regex
    (regex_pattern)
    (regex_flags))
  (regex
    (regex_pattern)
    (regex_flags))
  (regex
    (regex_pattern)))
