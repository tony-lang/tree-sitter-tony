==================
map
==================

{}
{ a, b }
{ ['a']: 1, ...b, c: 'str', d, e }

---

(program
  (map)
  (map
    (shorthand_pair_identifier)
    (shorthand_pair_identifier))
  (map
    (expression_pair
      key: (string)
      value: (number))
    (spread_map
      value: (identifier))
    (expression_pair
      key: (shorthand_access_identifier)
      value: (string))
    (shorthand_pair_identifier)
    (shorthand_pair_identifier)))

==================
tuple
==================

(a, 1, 'str', ...x)
(1,1)

---

(program
  (tuple
    (identifier)
    (number)
    (string)
    (spread_tuple
      value: (identifier)))
  (tuple
    (number)
    (number)))

==================
list
==================

[]
[a, 1, ...b, 'str']
[1,1..1,1]

---

(program
  (list)
  (list
    (identifier)
    (number)
    (spread_list
      value: (identifier))
    (string))
  (list
    (number)
    (infix_application
      left: (number)
      value: (identifier)
      right: (number))
    (number)))

==================
type
==================

Type
AaA0Z

---

(program
  (type)
  (type))

==================
map type
==================

a :: { Type: Type } := 1

---

(program
  (assignment
    pattern: (identifier_pattern
      name: (identifier_pattern_name)
      type: (type_constructor
        (map_type
          key: (type_constructor
            (type))
          value: (type_constructor
            (type)))))
    value: (number)))

==================
tuple type
==================

a :: (Type, Type) := 1

---

(program
  (assignment
    pattern: (identifier_pattern
      name: (identifier_pattern_name)
      type: (type_constructor
        (tuple_type
          (type_constructor
            (type))
          (type_constructor
            (type)))))
    value: (number)))

==================
list type
==================

a :: [Type] := 1

---

(program
  (assignment
    pattern: (identifier_pattern
      name: (identifier_pattern_name)
      type: (type_constructor
        (list_type
          type: (type_constructor
            (type)))))
    value: (number)))

==================
curried type
==================

a :: Type -> [Type] -> Type := 1
a :: Type -> (Type -> Type) -> a := 1

---

(program
  (assignment
    pattern: (identifier_pattern
      name: (identifier_pattern_name)
      type: (type_constructor
        (type)
        (list_type
          type: (type_constructor
            (type)))
        (type)))
    value: (number))
  (assignment
    pattern: (identifier_pattern
      name: (identifier_pattern_name)
      type: (type_constructor
        (type)
        (type_constructor
          (type)
          (type))
        (type_variable)))
    value: (number)))

==================
intersection type
==================

a :: Type -> Type & Type := 1

---

(program
  (assignment
    pattern: (identifier_pattern
      name: (identifier_pattern_name)
      type: (type_constructor
        (intersection
          (type_constructor
            (type)
            (type))
          (type_constructor
            (type)))))
    value: (number)))

==================
union type
==================

a :: Type -> Type | Type := 1

---

(program
  (assignment
    pattern: (identifier_pattern
      name: (identifier_pattern_name)
      type: (type_constructor
        (union
          (type_constructor
            (type)
            (type))
          (type_constructor
            (type)))))
    value: (number)))

==================
boolean
==================

false
true

---

(program
  (boolean)
  (boolean))

==================
decimal
==================

-0.6_6
+0.1_1
123.4123
1_1.3_1
1_1.0
1e3_4
0.3e1_4
1e322
1e-3
1e3
1.8e10
1.0e10
-1e10

---

(program
  (prefix_application
    value: (identifier)
    argument: (number))
  (prefix_application
    value: (identifier)
    argument: (number))
  (number)
  (number)
  (number)
  (number)
  (number)
  (number)
  (number)
  (number)
  (number)
  (number)
  (prefix_application
    value: (identifier)
    argument: (number)))

==================
integer
==================

-1
0xDEAD
0o123
0b001
1_1
0x1_1
0o1_1
0b1_1

---

(program
  (prefix_application
    value: (identifier)
    argument: (number))
  (number)
  (number)
  (number)
  (number)
  (number)
  (number)
  (number))

=====================================
identifier
=====================================

abs
a5_ds_
abs?
+
\
||
/
.?

---

(program
  (identifier)
  (identifier)
  (identifier)
  (identifier)
  (identifier)
  (identifier)
  (identifier)
  (identifier))

=====================================
string
=====================================

"I'm ok"
'"ok"'
"\\"
"/"
"multiline \
string"
'{func}'

---

(program
  (string)
  (string)
  (string
    (escape_sequence))
  (string)
  (string
    (escape_sequence))
  (string
    (interpolation
      value: (identifier))))

=====================================
regex
=====================================

r/one\\/
r/one/g
r/one/i
r/one/gim
r/on\/e/gim
r/on[^/]afe/gim
r/[\]/]/

---

(program
  (regex
    (regex_pattern))
  (regex
    (regex_pattern)
    (regex_flags))
  (regex
    (regex_pattern)
    (regex_flags))
  (regex
    (regex_pattern)
    (regex_flags))
  (regex
    (regex_pattern)
    (regex_flags))
  (regex
    (regex_pattern)
    (regex_flags))
  (regex
    (regex_pattern)))
