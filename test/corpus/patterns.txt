============================================
map pattern
============================================

{ b: c :: Type } := a
{ b: c :: Type, d :: Type, ['e']: e :: Type, ...f :: Type } := a

---

(program
  (assignment
    left: (map_pattern
      (pattern_pair
        left: (shorthand_access_identifier)
        right: (pattern
          name: (identifier_pattern
            name: (identifier_pattern_name)
            type: (type_constructor
              (type))))))
    right: (identifier))
  (assignment
    left: (map_pattern
      (pattern_pair
        left: (shorthand_access_identifier)
        right: (pattern
          name: (identifier_pattern
            name: (identifier_pattern_name)
            type: (type_constructor
              (type)))))
      (shorthand_pair_identifier_pattern
        name: (identifier_pattern
          name: (identifier_pattern_name)
          type: (type_constructor
              (type))))
      (pattern_pair
        left: (string)
        right: (pattern
          name: (identifier_pattern
            name: (identifier_pattern_name)
            type: (type_constructor
              (type)))))
      (rest_map
        name: (identifier_pattern
          name: (identifier_pattern_name)
          type: (type_constructor
              (type)))))
    right: (identifier)))

============================================
tuple pattern
============================================

(A, b :: Type) := a
(b :: Type, ...c :: Type) := a

---

(program
  (assignment
    left: (tuple_pattern
      (pattern
        value: (type))
      (pattern
        name: (identifier_pattern
          name: (identifier_pattern_name)
          type: (type_constructor
            (type)))))
    right: (identifier))
  (assignment
    left: (tuple_pattern
      (pattern
        name: (identifier_pattern
          name: (identifier_pattern_name)
          type: (type_constructor
            (type))))
      (rest_tuple
        name: (identifier_pattern
          name: (identifier_pattern_name)
          type: (type_constructor
            (type)))))
    right: (identifier)))

============================================
list pattern
============================================

[b :: Type, c :: Type] := a
[b :: Type, c :: Type, ...d :: Type] := a

---

(program
  (assignment
    left: (list_pattern
      (pattern
        name: (identifier_pattern
          name: (identifier_pattern_name)
          type: (type_constructor
            (type))))
      (pattern
        name: (identifier_pattern
          name: (identifier_pattern_name)
          type: (type_constructor
            (type)))))
    right: (identifier))
  (assignment
    left: (list_pattern
      (pattern
        name: (identifier_pattern
          name: (identifier_pattern_name)
          type: (type_constructor
            (type))))
      (pattern
        name: (identifier_pattern
          name: (identifier_pattern_name)
          type: (type_constructor
            (type))))
      (rest_list
        name: (identifier_pattern
          name: (identifier_pattern_name)
          type: (type_constructor
            (type)))))
    right: (identifier)))
