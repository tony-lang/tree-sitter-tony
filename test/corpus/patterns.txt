============================================
map pattern
============================================

{ b: c :: Type } := a
{ b: c :: Type, d :: Type, ['e']: e :: Type, ...f :: Type = {} } := a

---

(program
  (assignment
    pattern: (map_pattern
      (pattern_pair
        key: (shorthand_access_identifier)
        value: (identifier_pattern
          name: (identifier_pattern_name)
          type: (type_constructor
            (type)))))
    value: (identifier))
  (assignment
    pattern: (map_pattern
      (pattern_pair
        key: (shorthand_access_identifier)
        value: (identifier_pattern
          name: (identifier_pattern_name)
          type: (type_constructor
            (type))))
      (shorthand_pair_identifier_pattern
        name: (identifier_pattern_name)
        type: (type_constructor
            (type)))
      (pattern_pair
        key: (string)
        value: (identifier_pattern
          name: (identifier_pattern_name)
          type: (type_constructor
            (type))))
      (rest_map
        name: (identifier_pattern
          name: (identifier_pattern_name)
          type: (type_constructor
              (type))
          default: (map))))
    value: (identifier)))

============================================
tuple pattern
============================================

(A, b :: Type, ...c) := a

---

(program
  (assignment
    pattern: (tuple_pattern
      (type)
      (identifier_pattern
        name: (identifier_pattern_name)
        type: (type_constructor
          (type)))
      (rest_tuple
        name: (identifier_pattern
          name: (identifier_pattern_name))))
    value: (identifier)))

============================================
list pattern
============================================

[b :: Type, c :: Type] := a
[b :: Type, c :: Type, ...d :: Type = [1]] := a

---

(program
  (assignment
    pattern: (list_pattern
      (identifier_pattern
        name: (identifier_pattern_name)
        type: (type_constructor
          (type)))
      (identifier_pattern
        name: (identifier_pattern_name)
        type: (type_constructor
          (type))))
    value: (identifier))
  (assignment
    pattern: (list_pattern
      (identifier_pattern
        name: (identifier_pattern_name)
        type: (type_constructor
          (type)))
      (identifier_pattern
        name: (identifier_pattern_name)
        type: (type_constructor
          (type)))
      (rest_list
        name: (identifier_pattern
          name: (identifier_pattern_name)
          type: (type_constructor
            (type))
          default: (list
            (number)))))
    value: (identifier)))
