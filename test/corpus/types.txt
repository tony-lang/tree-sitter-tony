==================
struct type
==================

a :: {
  a: Type,
  [Type]: Type
} := 1

---

(program
  term: (assignment
    pattern: (identifier_pattern
      name: (identifier_pattern_name)
      type: (struct_type
        member: (member_type
          key: (shorthand_member_identifier)
          value: (parametric_type
            name: (type)))
        member: (member_type
          key: (parametric_type
            name: (type))
          value: (parametric_type
            name: (type)))))
    value: (number)))

==================
named struct type
==================

a :: constructor { a: Type, [Type]: Type } := 1

---

(program
  term: (assignment
    pattern: (identifier_pattern
      name: (identifier_pattern_name)
      type: (named_type
        name: (constructor_declaration)
        type: (struct_type
          member: (member_type
            key: (shorthand_member_identifier)
            value: (parametric_type
              name: (type)))
          member: (member_type
            key: (parametric_type
              name: (type))
            value: (parametric_type
              name: (type))))))
    value: (number)))

==================
tuple type
==================

a :: (Type, Type) := 1

---

(program
  term: (assignment
    pattern: (identifier_pattern
      name: (identifier_pattern_name)
      type: (tuple_type
        element: (parametric_type
          name: (type))
        element: (parametric_type
          name: (type))))
    value: (number)))

==================
named tuple type
==================

a :: constructor (Type, Type) := 1

---

(program
  term: (assignment
    pattern: (identifier_pattern
      name: (identifier_pattern_name)
      type: (named_type
        name: (constructor_declaration)
        type: (tuple_type
          element: (parametric_type
            name: (type))
          element: (parametric_type
            name: (type)))))
    value: (number)))

==================
list type
==================

a :: [Type] := 1

---

(program
  term: (assignment
    pattern: (identifier_pattern
      name: (identifier_pattern_name)
      type: (list_type
        element: (parametric_type
          name: (type))))
    value: (number)))

==================
named list type
==================

a :: constructor [Type] := 1

---

(program
  term: (assignment
    pattern: (identifier_pattern
      name: (identifier_pattern_name)
      type: (named_type
        name: (constructor_declaration)
        type: (list_type
          element: (parametric_type
            name: (type)))))
    value: (number)))

==================
curried type
==================

a :: Type -> [Type] -> Type := 1
a :: Type -> (Type -> Type) -> a := 1

---

(program
  term: (assignment
    pattern: (identifier_pattern
      name: (identifier_pattern_name)
      type: (curried_type
        from: (parametric_type
          name: (type))
        to: (curried_type
          from: (list_type
            element: (parametric_type
              name: (type)))
          to: (parametric_type
            name: (type)))))
    value: (number))
  term: (assignment
    pattern: (identifier_pattern
      name: (identifier_pattern_name)
      type: (curried_type
        from: (parametric_type
          name: (type))
        to: (curried_type
          from: (type_group
            type: (curried_type
              from: (parametric_type
                name: (type))
              to: (parametric_type
                name: (type))))
          to: (type_variable))))
    value: (number)))

==================
parametric type
==================

a as Type
a as Type<a>
a as Type<Type, a, typeof b, typeof 'string', typeof 5>

---

(program
  term: (type_hint
    value: (identifier)
    type: (parametric_type
      name: (type)))
  term: (type_hint
    value: (identifier)
    type: (parametric_type
      name: (type)
      arguments: (type_arguments
        parameter: (type_variable))))
  term: (type_hint
    value: (identifier)
    type: (parametric_type
      name: (type)
      arguments: (type_arguments
        parameter: (parametric_type
          name: (type))
        parameter: (type_variable)
        parameter: (typeof
          value: (identifier))
        parameter: (typeof
          value: (string))
        parameter: (typeof
          value: (number))))))

==================
named parametric type
==================

a as constructor Type
a as constructor Type<a>
a as constructor Type<Type, a, typeof b, typeof 'string', typeof 5>

---

(program
  term: (type_hint
    value: (identifier)
    type: (named_type
      name: (constructor_declaration)
      type: (parametric_type
        name: (type))))
  term: (type_hint
    value: (identifier)
    type: (named_type
      name: (constructor_declaration)
      type: (parametric_type
        name: (type)
        arguments: (type_arguments
          parameter: (type_variable)))))
  term: (type_hint
    value: (identifier)
    type: (named_type
      name: (constructor_declaration)
      type: (parametric_type
        name: (type)
        arguments: (type_arguments
          parameter: (parametric_type
            name: (type))
          parameter: (type_variable)
          parameter: (typeof
            value: (identifier))
          parameter: (typeof
            value: (string))
          parameter: (typeof
            value: (number)))))))

==================
intersection/union type
==================

a :: Type | Type & Type | Type := 1

---

(program
  term: (assignment
    pattern: (identifier_pattern
      name: (identifier_pattern_name)
      type: (union_type
        left: (parametric_type
          name: (type))
        right: (union_type
          left: (intersection_type
            left: (parametric_type
              name: (type))
            right: (parametric_type
              name: (type)))
          right: (parametric_type
            name: (type)))))
    value: (number)))

==================
refinement type
==================

a :: Type<[(a ~ Type, Type) : a > 0, a < 10]> := 1

---

(program
  term: (assignment
    pattern: (identifier_pattern
      name: (identifier_pattern_name)
      type: (parametric_type
        name: (type)
        arguments: (type_arguments
          parameter: (refinement_type
            generator: (tuple_type
              element: (refinement_type_declaration
                name: (refinement_type_declaration_name)
                constraint: (type_constraint
                  type: (type)))
              element: (parametric_type
                name: (type)))
            predicate: (infix_application
              left: (identifier)
              name: (identifier)
              right: (number))
            predicate: (infix_application
              left: (identifier)
              name: (identifier)
              right: (number))))))
    value: (number)))

==================
type
==================

a :: Type := 1
a :: AaA0Z := 1

---

(program
  term: (assignment
    pattern: (identifier_pattern
      name: (identifier_pattern_name)
      type: (parametric_type
        name: (type)))
    value: (number))
  term: (assignment
    pattern: (identifier_pattern
      name: (identifier_pattern_name)
      type: (parametric_type
        name: (type)))
    value: (number)))
