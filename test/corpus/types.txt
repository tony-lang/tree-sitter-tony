==================
struct type
==================

a :: { a :: Type, b :: Type } := 1

---

(program
  expression: (assignment
    pattern: (identifier_pattern
      name: (identifier_pattern_name)
      type: (struct_type
        member: (member_type
          name: (identifier)
          type: (parametric_type
            name: (type)))
        member: (member_type
          name: (identifier)
          type: (parametric_type
            name: (type)))))
    value: (number)))

==================
named struct type
==================

a :: Struct { a :: Type, b :: Type } := 1

---

(program
  expression: (assignment
    pattern: (identifier_pattern
      name: (identifier_pattern_name)
      type: (named_type
        name: (type)
        type: (struct_type
          member: (member_type
            name: (identifier)
            type: (parametric_type
              name: (type)))
          member: (member_type
            name: (identifier)
            type: (parametric_type
              name: (type))))))
    value: (number)))

==================
tuple type
==================

a :: (Type, Type) := 1

---

(program
  expression: (assignment
    pattern: (identifier_pattern
      name: (identifier_pattern_name)
      type: (tuple_type
        value: (parametric_type
          name: (type))
        value: (parametric_type
          name: (type))))
    value: (number)))

==================
named tuple type
==================

a :: Tuple (Type, Type) := 1

---

(program
  expression: (assignment
    pattern: (identifier_pattern
      name: (identifier_pattern_name)
      type: (named_type
        name: (type)
        type: (tuple_type
          value: (parametric_type
            name: (type))
          value: (parametric_type
            name: (type)))))
    value: (number)))

==================
list type
==================

a :: [Type] := 1

---

(program
  expression: (assignment
    pattern: (identifier_pattern
      name: (identifier_pattern_name)
      type: (list_type
        element: (parametric_type
          name: (type))))
    value: (number)))

==================
named list type
==================

a :: List [Type] := 1

---

(program
  expression: (assignment
    pattern: (identifier_pattern
      name: (identifier_pattern_name)
      type: (named_type
        name: (type)
        type: (list_type
          element: (parametric_type
            name: (type)))))
    value: (number)))

==================
curried type
==================

a :: Type -> [Type] -> Type := 1
a :: Type -> (Type -> Type) -> a := 1

---

(program
  expression: (assignment
    pattern: (identifier_pattern
      name: (identifier_pattern_name)
      type: (curried_type
        from: (parametric_type
          name: (type))
        to: (curried_type
          from: (list_type
            element: (parametric_type
              name: (type)))
          to: (parametric_type
            name: (type)))))
    value: (number))
  expression: (assignment
    pattern: (identifier_pattern
      name: (identifier_pattern_name)
      type: (curried_type
        from: (parametric_type
          name: (type))
        to: (curried_type
          from: (type_group
            type: (curried_type
              from: (parametric_type
                name: (type))
              to: (parametric_type
                name: (type))))
          to: (type_variable))))
    value: (number)))

==================
parametric type
==================

Type
Type<a>
Type<Type, a, typeof b, typeof 'string', typeof 5>

---

(program
  expression: (parametric_type
    name: (type))
  expression: (parametric_type
    name: (type)
    parameter: (type_variable))
  expression: (parametric_type
    name: (type)
    parameter: (parametric_type
      name: (type))
    parameter: (type_variable)
    parameter: (typeof
      value: (identifier))
    parameter: (typeof
      value: (string))
    parameter: (typeof
      value: (number))))

==================
named parametric type
==================

a as Name Type
a as Name Type<a>
a as Name Type<Type, a, typeof b, typeof 'string', typeof 5>

---

(program
  expression: (type_hint
    value: (identifier)
    type: (named_type
      name: (type)
      type: (parametric_type
        name: (type))))
  expression: (type_hint
    value: (identifier)
    type: (named_type
      name: (type)
      type: (parametric_type
        name: (type)
        parameter: (type_variable))))
  expression: (type_hint
    value: (identifier)
    type: (named_type
      name: (type)
      type: (parametric_type
        name: (type)
        parameter: (parametric_type
          name: (type))
        parameter: (type_variable)
        parameter: (typeof
          value: (identifier))
        parameter: (typeof
          value: (string))
        parameter: (typeof
          value: (number))))))

==================
intersection/union type
==================

a :: Type | Type & Type | Type := 1

---

(program
  expression: (assignment
    pattern: (identifier_pattern
      name: (identifier_pattern_name)
      type: (union_type
        left: (parametric_type
          name: (type))
        right: (union_type
          left: (intersection_type
            left: (parametric_type
              name: (type))
            right: (parametric_type
              name: (type)))
          right: (parametric_type
            name: (type)))))
    value: (number)))
