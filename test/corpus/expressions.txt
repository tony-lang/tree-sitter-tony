==================
abstraction
==================

(a) =>
  a
(a, b) => a
(a :: Type, b :: Type, 1, { c :: Type = 1 }) => a

fib :=
  (0) =>
    0
  (1) => 1
  (n :: Type = 2) =>
    fib(n - 1) + fib(n - 2)

(...a :: Type) =>
  b := (c :: Type) =>
    c
  b(1)

() => 1
/ := (a, b) => /

---

(program
  expression: (abstraction
    branch: (abstraction_branch
      parameters: (parameters
        parameter: (identifier_pattern
          name: (identifier_pattern_name)))
      body: (block
        expression: (identifier))))
  expression: (abstraction
    branch: (abstraction_branch
      parameters: (parameters
        parameter: (identifier_pattern
          name: (identifier_pattern_name))
        parameter: (identifier_pattern
          name: (identifier_pattern_name)))
      body: (block
        expression: (identifier))))
  expression: (abstraction
    branch: (abstraction_branch
      parameters: (parameters
        parameter: (identifier_pattern
          name: (identifier_pattern_name)
          type: (parametric_type
            name: (type)))
        parameter: (identifier_pattern
          name: (identifier_pattern_name)
          type: (parametric_type
            name: (type)))
        parameter: (number)
        parameter: (map_pattern
          element: (shorthand_pair_identifier_pattern
            name: (identifier_pattern_name)
            type: (parametric_type
              name: (type))
            default: (number))))
      body: (block
        expression: (identifier))))
  expression: (assignment
    pattern: (identifier_pattern
      name: (identifier_pattern_name))
    value: (abstraction
      branch: (abstraction_branch
        parameters: (parameters
          parameter: (number))
        body: (block
          expression: (number)))
      branch: (abstraction_branch
        parameters: (parameters
          parameter: (number))
        body: (block
          expression: (number)))
      branch: (abstraction_branch
        parameters: (parameters
          parameter: (identifier_pattern
            name: (identifier_pattern_name)
            type: (parametric_type
              name: (type))
            default: (number)))
        body: (block
          expression: (infix_application
            left: (application
              value: (identifier)
              arguments: (arguments
                argument: (argument
                  value: (infix_application
                    left: (identifier)
                    value: (identifier)
                    right: (number)))))
            value: (identifier)
            right: (application
              value: (identifier)
              arguments: (arguments
                argument: (argument
                  value: (infix_application
                    left: (identifier)
                    value: (identifier)
                    right: (number))))))))))
  expression: (abstraction
    branch: (abstraction_branch
      parameters: (parameters
        parameter: (rest_tuple
          name: (identifier_pattern
            name: (identifier_pattern_name)
            type: (parametric_type
              name: (type)))))
      body: (block
        expression: (assignment
          pattern: (identifier_pattern
            name: (identifier_pattern_name))
          value: (abstraction
            branch: (abstraction_branch
              parameters: (parameters
                parameter: (identifier_pattern
                  name: (identifier_pattern_name)
                  type: (parametric_type
                    name: (type))))
              body: (block
                expression: (identifier)))))
        expression: (application
          value: (identifier)
          arguments: (arguments
            argument: (argument
              value: (number)))))))
  expression: (abstraction
    branch: (abstraction_branch
      parameters: (parameters)
      body: (block
        expression: (number))))
  expression: (assignment
    pattern: (identifier_pattern
      name: (identifier_pattern_name))
    value: (abstraction
      branch: (abstraction_branch
        parameters: (parameters
          parameter: (identifier_pattern
            name: (identifier_pattern_name))
          parameter: (identifier_pattern
            name: (identifier_pattern_name)))
        body: (block
          expression: (identifier))))))

==================
application
==================

a(1)(1)
+(1)
a(?, 1)
+ 1
1 `a` -b()
a(...(a, b))

---

(program
  expression: (application
    value: (application
      value: (identifier)
    arguments: (arguments
      argument: (argument
        value: (number))))
  arguments: (arguments
      argument: (argument
        value: (number))))
  expression: (prefix_application
    value: (identifier)
    argument: (number))
  expression: (application
    value: (identifier)
    arguments: (arguments
      argument: (argument)
      argument: (argument
        value: (number))))
  expression: (prefix_application
    value: (identifier)
    argument: (number))
  expression: (infix_application
    left: (number)
    value: (identifier)
    right: (prefix_application
      value: (identifier)
      argument: (application
        value: (identifier)
        arguments: (arguments))))
  expression: (application
    value: (identifier)
    arguments: (arguments
      argument: (argument
        value: (spread_tuple
          value: (tuple
            element: (identifier)
            element: (identifier)))))))

==================
prefix application
==================

!false
+1
-1
~1

---

(program
  expression: (prefix_application
    value: (identifier)
    argument: (boolean))
  expression: (prefix_application
    value: (identifier)
    argument: (number))
  expression: (prefix_application
    value: (identifier)
    argument: (number))
  expression: (prefix_application
    value: (identifier)
    argument: (number)))

==================
infix application
==================

1 .. 1
1 ^ 1
1 * 1
1 / 1
1 + 1
1 - 1
1 % 1
1 < 1
1 <= 1
1 > 1
1 >= 1
1 == 1
1 != 1
a === 1
1 !== b
a ~ b
false && false
false || false
false ==> true <=> true
false && false || false
false || false && false
1 + 1 % 1
1 - 1 + 1
1 - -1
1 * 1 / 1 - 1
false || !false
(a.b) . c ^ 1 . (d.e)

---

(program
  expression: (infix_application
    left: (number)
    value: (identifier)
    right: (number))
  expression: (infix_application
    left: (number)
    value: (identifier)
    right: (number))
  expression: (infix_application
    left: (number)
    value: (identifier)
    right: (number))
  expression: (infix_application
    left: (number)
    value: (identifier)
    right: (number))
  expression: (infix_application
    left: (number)
    value: (identifier)
    right: (number))
  expression: (infix_application
    left: (number)
    value: (identifier)
    right: (number))
  expression: (infix_application
    left: (number)
    value: (identifier)
    right: (number))
  expression: (infix_application
    left: (number)
    value: (identifier)
    right: (number))
  expression: (infix_application
    left: (number)
    value: (identifier)
    right: (number))
  expression: (infix_application
    left: (number)
    value: (identifier)
    right: (number))
  expression: (infix_application
    left: (number)
    value: (identifier)
    right: (number))
  expression: (infix_application
    left: (number)
    value: (identifier)
    right: (number))
  expression: (infix_application
    left: (number)
    value: (identifier)
    right: (number))
  expression: (infix_application
    left: (identifier)
    value: (identifier)
    right: (number))
  expression: (infix_application
    left: (number)
    value: (identifier)
    right: (identifier))
  expression: (infix_application
    left: (identifier)
    value: (identifier)
    right: (identifier))
  expression: (infix_application
    left: (boolean)
    value: (identifier)
    right: (boolean))
  expression: (infix_application
    left: (boolean)
    value: (identifier)
    right: (boolean))
  expression: (infix_application
    left: (infix_application
      left: (boolean)
      value: (identifier)
      right: (boolean))
    value: (identifier)
    right: (boolean))
  expression: (infix_application
    left: (infix_application
      left: (boolean)
      value: (identifier)
      right: (boolean))
    value: (identifier)
    right: (boolean))
  expression: (infix_application
    left: (boolean)
    value: (identifier)
    right: (infix_application
      left: (boolean)
      value: (identifier)
      right: (boolean)))
  expression: (infix_application
    left: (infix_application
      left: (number)
      value: (identifier)
      right: (number))
    value: (identifier)
    right: (number))
  expression: (infix_application
    left: (infix_application
      left: (number)
      value: (identifier)
      right: (number))
    value: (identifier)
    right: (number))
  expression: (infix_application
    left: (number)
    value: (identifier)
    right: (prefix_application
      value: (identifier)
      argument: (number)))
  expression: (infix_application
    left: (infix_application
      left: (infix_application
        left: (number)
        value: (identifier)
        right: (number))
      value: (identifier)
      right: (number))
    value: (identifier)
    right: (number))
  expression: (infix_application
    left: (boolean)
    value: (identifier)
    right: (prefix_application
      value: (identifier)
      argument: (boolean)))
  expression: (infix_application
    left: (pipeline
      argument: (pipeline
        argument: (identifier)
        value: (identifier))
      value: (identifier))
    value: (identifier)
    right: (pipeline
      argument: (number)
      value: (pipeline
        argument: (identifier)
        value: (identifier)))))

==================
pipeline
==================

a.b.c(1)

---

(program
  expression: (application
    value: (pipeline
      argument: (pipeline
        argument: (identifier)
        value: (identifier))
      value: (identifier))
    arguments: (arguments
      argument: (argument
        value: (number)))))

==================
access
==================

a[0]
A->b(1)
a.b[c]

---

(program
  expression: (access
      value: (identifier)
      accessor: (number))
  expression: (application
    value: (access
      value: (parametric_type
        name: (type))
      accessor: (shorthand_access_identifier))
    arguments: (arguments
      argument: (argument
        value: (number))))
  expression: (pipeline
    argument: (identifier)
    value: (access
      value: (identifier)
      accessor: (identifier))))

==================
assignment
==================

a :: Type := 1
a := (a :: Type) =>
  1

---

(program
  expression: (assignment
    pattern: (identifier_pattern
      name: (identifier_pattern_name)
      type: (parametric_type
        name: (type)))
    value: (number))
  expression: (assignment
    pattern: (identifier_pattern
      name: (identifier_pattern_name))
    value: (abstraction
      branch: (abstraction_branch
        parameters: (parameters
          parameter: (identifier_pattern
            name: (identifier_pattern_name)
            type: (parametric_type
              name: (type))))
        body: (block
          expression: (number))))))

==================
import
==================

import
  a as b,
  c,
  a as b :: Type,
  c :: Type,
  Type as Type,
  Type
from 'source'
import a, b from 'source'

---

(program
  expression: (import
    import: (import_identifier_pair
      name: (identifier_pattern_name)
      as: (identifier_pattern
        name: (identifier_pattern_name)))
    import: (identifier_pattern
      name: (identifier_pattern_name))
    import: (import_identifier_pair
      name: (identifier_pattern_name)
      as: (identifier_pattern
        name: (identifier_pattern_name)
        type: (parametric_type
          name: (type))))
    import: (identifier_pattern
      name: (identifier_pattern_name)
      type: (parametric_type
        name: (type)))
    import: (import_type_pair
      name: (type)
      as: (type))
    import: (type)
    source: (string_pattern))
  expression: (import
    import: (identifier_pattern
      name: (identifier_pattern_name))
    import: (identifier_pattern
      name: (identifier_pattern_name))
    source: (string_pattern)))

==================
export import
==================

export a, b from 'source'

---

(program
  expression: (export_import
    import: (identifier_pattern
      name: (identifier_pattern_name))
    import: (identifier_pattern
      name: (identifier_pattern_name))
    source: (string_pattern)))

==================
export
==================

export a := 1
export module A
  export a := 1

---

(program
  expression: (export
    declaration: (assignment
      pattern: (identifier_pattern
        name: (identifier_pattern_name))
      value: (number)))
  expression: (export
    declaration: (module
      name: (type_declaration
        name: (type))
      body: (block
        expression: (export
          declaration: (assignment
            pattern: (identifier_pattern
              name: (identifier_pattern_name))
            value: (number)))))))

==================
return
==================

return 1
return (a :: Type) =>
  1

---

(program
  expression: (return
    value: (number))
  expression: (return
    value: (abstraction
      branch: (abstraction_branch
        parameters: (parameters
          parameter: (identifier_pattern
            name: (identifier_pattern_name)
            type: (parametric_type
              name: (type))))
        body: (block
          expression: (number))))))

==================
if
==================

if false
  1
if true
  1
else
  1
a :=
  if true
    1
  else if false then 1
  else if true
    1

fn(if false then 1)
if true then 1 else 1

---

(program
  expression: (if
    condition: (boolean)
    body: (block
      expression: (number)))
  expression: (if
    condition: (boolean)
    body: (block
      expression: (number))
    else: (block
      expression: (number)))
  expression: (assignment
    pattern: (identifier_pattern
      name: (identifier_pattern_name))
    value: (if
      condition: (boolean)
      body: (block
        expression: (number))
      else_if: (else_if
        condition: (boolean)
        body: (block
          expression: (number)))
      else_if: (else_if
        condition: (boolean)
        body: (block
          expression: (number)))))
  expression: (application
    value: (identifier)
    arguments: (arguments
      argument: (argument
        value: (if
          condition: (boolean)
          body: (block
            expression: (number))))))
  expression: (if
    condition: (boolean)
    body: (block
      expression: (number))
    else: (block
      expression: (number))))

==================
case
==================

a := case a
     when 1
       1

case a
when [1, a :: Type]
  a
when 1, 1 then 1
else 1

---

(program
  expression: (assignment
    pattern: (identifier_pattern
      name: (identifier_pattern_name))
    value: (case
      value: (identifier)
      when: (when
        pattern: (number)
        body: (block
          expression: (number)))))
  expression: (case
    value: (identifier)
    when: (when
      pattern: (list_pattern
        element: (number)
        element: (identifier_pattern
          name: (identifier_pattern_name)
          type: (parametric_type
            name: (type))))
      body: (block
        expression: (identifier)))
    when: (when
      pattern: (number)
      pattern: (number)
      body: (block
        expression: (number)))
    else: (block
      expression: (number))))

==================
module
==================

module Type
  a := 1
module Type<a> where a :: a := 1

---

(program
  expression: (module
    name: (type_declaration
      name: (type))
    body: (block
      expression: (assignment
        pattern: (identifier_pattern
          name: (identifier_pattern_name))
        value: (number))))
  expression: (module
    name: (type_declaration
      name: (type)
      parameter: (type_variable))
    body: (block
      expression: (assignment
        pattern: (identifier_pattern
          name: (identifier_pattern_name)
          type: (type_variable))
        value: (number)))))

==================
map
==================

{}
{ a, b }
{ ['a']: 1, ...b, c: 'str', d, e }

---

(program
  expression: (map)
  expression: (map
    element: (shorthand_pair_identifier)
    element: (shorthand_pair_identifier))
  expression: (map
    element: (expression_pair
      key: (string)
      value: (number))
    element: (spread_map
      value: (identifier))
    element: (expression_pair
      key: (shorthand_access_identifier)
      value: (string))
    element: (shorthand_pair_identifier)
    element: (shorthand_pair_identifier)))

==================
tuple
==================

(a, 1, 'str', ...x)
(1,1)

---

(program
  expression: (tuple
    element: (identifier)
    element: (number)
    element: (string)
    element: (spread_tuple
      value: (identifier)))
  expression: (tuple
    element: (number)
    element: (number)))

==================
list
==================

[]
[a, 1, ...b, 'str']
[1,1..1,1]

---

(program
  expression: (list)
  expression: (list
    element: (identifier)
    element: (number)
    element: (spread_list
      value: (identifier))
    element: (string))
  expression: (list
    element: (number)
    element: (infix_application
      left: (number)
      value: (identifier)
      right: (number))
    element: (number)))

==================
list comprehension
==================

[i * 2 | i in 1..10]
[i / 2 | i in 1..10 if i % 2 == 0]
[[x, y] | x in 1..10 if x % 2 == 0, y in 1..10 if i % 2 == 0]

---

(program
  expression: (list_comprehension
    body: (block
      expression: (infix_application
        left: (identifier)
        value: (identifier)
        right: (number)))
    generator: (generator
      name: (identifier_pattern_name)
      value: (infix_application
        left: (number)
        value: (identifier)
        right: (number))))
  expression: (list_comprehension
    body: (block
      expression: (infix_application
        left: (identifier)
        value: (identifier)
        right: (number)))
    generator: (generator
      name: (identifier_pattern_name)
      value: (infix_application
        left: (number)
        value: (identifier)
        right: (number))
      condition: (infix_application
        left: (infix_application
          left: (identifier)
          value: (identifier)
          right: (number))
        value: (identifier)
        right: (number))))
  expression: (list_comprehension
    body: (block
      expression: (list
        element: (identifier)
        element: (identifier)))
    generator: (generator
      name: (identifier_pattern_name)
      value: (infix_application
        left: (number)
        value: (identifier)
        right: (number))
      condition: (infix_application
        left: (infix_application
          left: (identifier)
          value: (identifier)
          right: (number))
        value: (identifier)
        right: (number)))
    generator: (generator
      name: (identifier_pattern_name)
      value: (infix_application
        left: (number)
        value: (identifier)
        right: (number))
      condition: (infix_application
        left: (infix_application
          left: (identifier)
          value: (identifier)
          right: (number))
        value: (identifier)
        right: (number)))))

==================
type alias
==================

type Type := Type
type Type<a, b> := a -> b

---

(program
  expression: (type_alias
    name: (type_declaration
      name: (type))
    type: (parametric_type
      name: (type)))
  expression: (type_alias
    name: (type_declaration
      name: (type)
      parameter: (type_variable)
      parameter: (type_variable))
    type: (curried_type
      parameter: (type_variable)
      parameter: (type_variable))))
