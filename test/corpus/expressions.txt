==================
abstraction
==================

(a :: Type, b :: Type) => a
(a :: Type, b :: Type, 1, { c :: Type = 1 }, ...d :: Type) => a

fib :: Type :=
  (0) =>
    0
  (1) => 1
  (n :: Type = 2) =>
    fib(n - 1) + fib(n - 2)

(a :: Type) =>
  b :: Type := (c :: Type) =>
    c
  b(1)

() => 1

---

(program
  (abstraction
    (abstraction_branch
      parameters: (parameters
        (pattern
          name: (identifier_pattern
            name: (identifier_pattern_name)
            type: (type_constructor
              (type))))
        (pattern
          name: (identifier_pattern
            name: (identifier_pattern_name)
            type: (type_constructor
              (type)))))
      body: (identifier)))
  (abstraction
    (abstraction_branch
      parameters: (parameters
        (pattern
          name: (identifier_pattern
            name: (identifier_pattern_name)
            type: (type_constructor
              (type))))
        (pattern
          name: (identifier_pattern
            name: (identifier_pattern_name)
            type: (type_constructor
              (type))))
        (pattern
          value: (number))
        (pattern
          pattern: (map_pattern
            (shorthand_pair_identifier_pattern
              name: (identifier_pattern
                name: (identifier_pattern_name)
                type: (type_constructor
                  (type)))
              value: (number))))
        (rest_list
          name: (identifier_pattern
            name: (identifier_pattern_name)
            type: (type_constructor
              (type)))))
      body: (identifier)))
  (assignment
    left: (identifier_pattern
      name: (identifier_pattern_name)
      type: (type_constructor
        (type)))
    right: (abstraction
      (abstraction_branch
        parameters: (parameters
          (pattern
            value: (number)))
        body: (block
          (number)))
      (abstraction_branch
        parameters: (parameters
          (pattern
            value: (number)))
        body: (block
          (number)))
      (abstraction_branch
        parameters: (parameters
          (pattern
            name: (identifier_pattern
              name: (identifier_pattern_name)
              type: (type_constructor
                (type)))
            value: (number)))
        body: (block
          (infix_application
            left: (application
              abstraction: (identifier)
              arguments: (arguments
                (argument
                  value: (infix_application
                    left: (identifier)
                    abstraction: (infix_application_operator)
                    right: (number)))))
            abstraction: (infix_application_operator)
            right: (application
              abstraction: (identifier)
              arguments: (arguments
                (argument
                  value: (infix_application
                    left: (identifier)
                    abstraction: (infix_application_operator)
                    right: (number))))))))))
  (abstraction
    (abstraction_branch
      parameters: (parameters
        (pattern
          name: (identifier_pattern
            name: (identifier_pattern_name)
            type: (type_constructor
              (type)))))
      body: (block
        (assignment
          left: (identifier_pattern
            name: (identifier_pattern_name)
            type: (type_constructor
              (type)))
          right: (abstraction
            (abstraction_branch
              parameters: (parameters
                (pattern
                  name: (identifier_pattern
                    name: (identifier_pattern_name)
                    type: (type_constructor
                      (type)))))
              body: (block
                (identifier)))))
        (application
          abstraction: (identifier)
          arguments: (arguments
            (argument
              value: (number)))))))
  (abstraction
    (abstraction_branch
      parameters: (parameters)
      body: (number))))

==================
application
==================

a(1)(1)
+(1)
a(?, 1)
+ 1
1 `a` -b()

---

(program
  (application
    abstraction: (application
      abstraction: (identifier)
    arguments: (arguments
      (argument
        value: (number))))
  arguments: (arguments
      (argument
        value: (number))))
  (prefix_application
    abstraction: (identifier)
    argument: (number))
  (application
    abstraction: (identifier)
    arguments: (arguments
      (argument)
      (argument
        value: (number))))
  (prefix_application
    abstraction: (identifier)
    argument: (number))
  (infix_application
    left: (number)
    abstraction: (infix_application_operator)
    right: (prefix_application
      abstraction: (identifier)
      argument: (application
        abstraction: (identifier)
        arguments: (arguments)))))

==================
prefix application
==================

!false
+1
-1
~1

---

(program
  (prefix_application
    abstraction: (identifier)
    argument: (boolean))
  (prefix_application
    abstraction: (identifier)
    argument: (number))
  (prefix_application
    abstraction: (identifier)
    argument: (number))
  (prefix_application
    abstraction: (identifier)
    argument: (number)))

==================
infix application
==================

1 .. 1
1 ^ 1
1 * 1
1 / 1
1 + 1
1 - 1
1 % 1
1 < 1
1 <= 1
1 > 1
1 >= 1
1 == 1
1 != 1
a === 1
1 !== b
a ~ b
false && false
false || false
false ==> true <=> true
false && false || false
false || false && false
1 + 1 % 1
1 - 1 + 1
1 - -1
1 * 1 / 1 - 1
false || !false
(a.b) . c ^ 1 . (d.e)

---

(program
  (infix_application
    left: (number)
    abstraction: (infix_application_operator)
    right: (number))
  (infix_application
    left: (number)
    abstraction: (infix_application_operator)
    right: (number))
  (infix_application
    left: (number)
    abstraction: (infix_application_operator)
    right: (number))
  (infix_application
    left: (number)
    abstraction: (infix_application_operator)
    right: (number))
  (infix_application
    left: (number)
    abstraction: (infix_application_operator)
    right: (number))
  (infix_application
    left: (number)
    abstraction: (infix_application_operator)
    right: (number))
  (infix_application
    left: (number)
    abstraction: (infix_application_operator)
    right: (number))
  (infix_application
    left: (number)
    abstraction: (infix_application_operator)
    right: (number))
  (infix_application
    left: (number)
    abstraction: (infix_application_operator)
    right: (number))
  (infix_application
    left: (number)
    abstraction: (infix_application_operator)
    right: (number))
  (infix_application
    left: (number)
    abstraction: (infix_application_operator)
    right: (number))
  (infix_application
    left: (number)
    abstraction: (infix_application_operator)
    right: (number))
  (infix_application
    left: (number)
    abstraction: (infix_application_operator)
    right: (number))
  (infix_application
    left: (identifier)
    abstraction: (infix_application_operator)
    right: (number))
  (infix_application
    left: (number)
    abstraction: (infix_application_operator)
    right: (identifier))
  (infix_application
    left: (identifier)
    abstraction: (infix_application_operator)
    right: (identifier))
  (infix_application
    left: (boolean)
    abstraction: (infix_application_operator)
    right: (boolean))
  (infix_application
    left: (boolean)
    abstraction: (infix_application_operator)
    right: (boolean))
  (infix_application
    left: (infix_application
      left: (boolean)
      abstraction: (infix_application_operator)
      right: (boolean))
    abstraction: (infix_application_operator)
    right: (boolean))
  (infix_application
    left: (infix_application
      left: (boolean)
      abstraction: (infix_application_operator)
      right: (boolean))
    abstraction: (infix_application_operator)
    right: (boolean))
  (infix_application
    left: (boolean)
    abstraction: (infix_application_operator)
    right: (infix_application
      left: (boolean)
      abstraction: (infix_application_operator)
      right: (boolean)))
  (infix_application
    left: (infix_application
      left: (number)
      abstraction: (infix_application_operator)
      right: (number))
    abstraction: (infix_application_operator)
    right: (number))
  (infix_application
    left: (infix_application
      left: (number)
      abstraction: (infix_application_operator)
      right: (number))
    abstraction: (infix_application_operator)
    right: (number))
  (infix_application
    left: (number)
    abstraction: (infix_application_operator)
    right: (prefix_application
      abstraction: (identifier)
      argument: (number)))
  (infix_application
    left: (infix_application
      left: (infix_application
        left: (number)
        abstraction: (infix_application_operator)
        right: (number))
      abstraction: (infix_application_operator)
      right: (number))
    abstraction: (infix_application_operator)
    right: (number))
  (infix_application
    left: (boolean)
    abstraction: (infix_application_operator)
    right: (prefix_application
      abstraction: (identifier)
      argument: (boolean)))
  (infix_application
    left: (pipeline
      left: (pipeline
        left: (identifier)
        right: (identifier))
      right: (identifier))
    abstraction: (infix_application_operator)
    right: (pipeline
      left: (number)
      right: (pipeline
        left: (identifier)
        right: (identifier)))))

==================
pipeline
==================

a.b.c(1)

---

(program
  (application
    abstraction: (pipeline
      left: (pipeline
        left: (identifier)
        right: (identifier))
      right: (identifier))
    arguments: (arguments
      (argument
        value: (number)))))

==================
access
==================

a[0]
A->b(1)
a.b[c]

---

(program
  (access
      left: (identifier)
      right: (number))
  (application
    abstraction: (access
      left: (type)
      right: (shorthand_access_identifier))
    arguments: (arguments
      (argument
        value: (number))))
  (pipeline
    left: (identifier)
    right: (access
      left: (identifier)
      right: (identifier))))

==================
assignment
==================

a :: Type := 1
a :: Type := (a :: Type) =>
  1

---

(program
  (assignment
    left: (identifier_pattern
      name: (identifier_pattern_name)
      type: (type_constructor
        (type)))
    right: (number))
  (assignment
    left: (identifier_pattern
      name: (identifier_pattern_name)
      type: (type_constructor
        (type)))
    right: (abstraction
      (abstraction_branch
        parameters: (parameters
          (pattern
            name: (identifier_pattern
              name: (identifier_pattern_name)
              type: (type_constructor
                (type)))))
        body: (block
          (number))))))

==================
return
==================

return 1
return (a :: Type) =>
  1

---

(program
  (return
    value: (number))
  (return
    value: (abstraction
      (abstraction_branch
        parameters: (parameters
          (pattern
            name: (identifier_pattern
              name: (identifier_pattern_name)
              type: (type_constructor
                (type)))))
        body: (number)))))

==================
if
==================

if false
  1
if true
  1
else
  1
a :: Type :=
  if true
    1
  else if false then 1
  else if true
    1

fn(if false then 1)
if true then 1 else 1

---

(program
  (if
    condition: (boolean)
    consequence: (block
      (number)))
  (if
    condition: (boolean)
    consequence: (block
      (number))
    alternative: (block
      (number)))
  (assignment
    left: (identifier_pattern
      name: (identifier_pattern_name)
      type: (type_constructor
        (type)))
    right: (if
      condition: (boolean)
      consequence: (block
        (number))
      alternatives: (else_if_clauses
        (else_if_clause
          condition: (boolean)
          consequence: (block
            (number)))
        (else_if_clause
          condition: (boolean)
          consequence: (block
            (number))))))
  (application
    abstraction: (identifier)
    arguments: (arguments
      (argument
        value: (if
          condition: (boolean)
          consequence: (number)))))
  (if
    condition: (boolean)
    consequence: (number)
    alternative: (number)))

==================
case
==================

a :: Type := case a
             when 1
               1

case a
when [1, a :: Type]
  a
when 1, 1 then 1
else 1

---

(program
  (assignment
    left: (identifier_pattern
      name: (identifier_pattern_name)
      type: (type_constructor
        (type)))
    right: (case
      value: (identifier)
      branches: (when_clauses
        (when_clause
          values: (pattern_list
            (pattern
              value: (number)))
          consequence: (block
            (number))))))
  (case
    value: (identifier)
    branches: (when_clauses
      (when_clause
        values: (pattern_list
          (pattern
            pattern: (list_pattern
              (pattern
                value: (number))
              (pattern
                name: (identifier_pattern
                  name: (identifier_pattern_name)
                  type: (type_constructor
                    (type)))))))
        consequence: (block
          (identifier)))
      (when_clause
        values: (pattern_list
          (pattern
            value: (number))
          (pattern
            value: (number)))
        consequence: (block
          (number))))
    default: (block
      (number))))

==================
module
==================

module Type
  a :: Type := 1
module Type where a :: Type := 1

---

(program
  (module
    name: (type)
    body: (block
      (assignment
        left: (identifier_pattern
          name: (identifier_pattern_name)
          type: (type_constructor
            (type)))
        right: (number))))
  (module
    name: (type)
    body: (block
      (assignment
        left: (identifier_pattern
          name: (identifier_pattern_name)
          type: (type_constructor
            (type)))
        right: (number)))))

==================
list comprehension
==================

[i * 2 | i in 1..10]
[i / 2 | i in 1..10 if i % 2 == 0]
[[x, y] | x in 1..10 if x % 2 == 0, y in 1..10 if i % 2 == 0]

---

(program
  (list_comprehension
    body: (infix_application
      left: (identifier)
      abstraction: (infix_application_operator)
      right: (number))
    generators: (generators
      (generator
        name: (identifier)
        value: (infix_application
          left: (number)
          abstraction: (infix_application_operator)
          right: (number)))))
  (list_comprehension
    body: (infix_application
      left: (identifier)
      abstraction: (infix_application_operator)
      right: (number))
    generators: (generators
      (generator
        name: (identifier)
        value: (infix_application
          left: (number)
          abstraction: (infix_application_operator)
          right: (number))
        condition: (generator_condition
          (infix_application
            left: (infix_application
              left: (identifier)
              abstraction: (infix_application_operator)
              right: (number))
            abstraction: (infix_application_operator)
            right: (number))))))
  (list_comprehension
    body: (list
      (identifier)
      (identifier))
    generators: (generators
      (generator
        name: (identifier)
        value: (infix_application
          left: (number)
          abstraction: (infix_application_operator)
          right: (number))
        condition: (generator_condition
          (infix_application
            left: (infix_application
              left: (identifier)
              abstraction: (infix_application_operator)
              right: (number))
            abstraction: (infix_application_operator)
            right: (number))))
      (generator
        name: (identifier)
        value: (infix_application
          left: (number)
          abstraction: (infix_application_operator)
          right: (number))
        condition: (generator_condition
          (infix_application
            left: (infix_application
              left: (identifier)
              abstraction: (infix_application_operator)
              right: (number))
            abstraction: (infix_application_operator)
            right: (number)))))))
