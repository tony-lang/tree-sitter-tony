==================
abstraction
==================

(a) =>
  a
(a, b) => a
(a :: Type, b :: Type, 1, { c :: Type = 1 }) => a

fib :=
  (0) =>
    0
  (1) => 1
  (n :: Type = 2) =>
    fib(n - 1) + fib(n - 2)

(a :: Type) =>
  b := (c :: Type) =>
    c
  b(1)

() => 1
/ := (a, b) => /

---

(program
  (abstraction
    (abstraction_branch
      parameters: (parameters
        (identifier_pattern
          name: (identifier_pattern_name)))
      body: (block
        (identifier))))
  (abstraction
    (abstraction_branch
      parameters: (parameters
        (identifier_pattern
          name: (identifier_pattern_name))
        (identifier_pattern
          name: (identifier_pattern_name)))
      body: (block
        (identifier))))
  (abstraction
    (abstraction_branch
      parameters: (parameters
        (identifier_pattern
          name: (identifier_pattern_name)
          type: (type_constructor
            (type)))
        (identifier_pattern
          name: (identifier_pattern_name)
          type: (type_constructor
            (type)))
        (number)
        (map_pattern
          (shorthand_pair_identifier_pattern
            name: (identifier_pattern_name)
            type: (type_constructor
              (type))
            default: (number))))
      body: (block
        (identifier))))
  (assignment
    pattern: (identifier_pattern
      name: (identifier_pattern_name))
    value: (abstraction
      (abstraction_branch
        parameters: (parameters
          (number))
        body: (block
          (number)))
      (abstraction_branch
        parameters: (parameters
          (number))
        body: (block
          (number)))
      (abstraction_branch
        parameters: (parameters
          (identifier_pattern
            name: (identifier_pattern_name)
            type: (type_constructor
              (type))
            default: (number)))
        body: (block
          (infix_application
            left: (application
              value: (identifier)
              arguments: (arguments
                (argument
                  value: (infix_application
                    left: (identifier)
                    value: (identifier)
                    right: (number)))))
            value: (identifier)
            right: (application
              value: (identifier)
              arguments: (arguments
                (argument
                  value: (infix_application
                    left: (identifier)
                    value: (identifier)
                    right: (number))))))))))
  (abstraction
    (abstraction_branch
      parameters: (parameters
        (identifier_pattern
          name: (identifier_pattern_name)
          type: (type_constructor
            (type))))
      body: (block
        (assignment
          pattern: (identifier_pattern
            name: (identifier_pattern_name))
          value: (abstraction
            (abstraction_branch
              parameters: (parameters
                (identifier_pattern
                  name: (identifier_pattern_name)
                  type: (type_constructor
                    (type))))
              body: (block
                (identifier)))))
        (application
          value: (identifier)
          arguments: (arguments
            (argument
              value: (number)))))))
  (abstraction
    (abstraction_branch
      parameters: (parameters)
      body: (block
        (number))))
  (assignment
    pattern: (identifier_pattern
      name: (identifier_pattern_name))
    value: (abstraction
      (abstraction_branch
        parameters: (parameters
          (identifier_pattern
            name: (identifier_pattern_name))
          (identifier_pattern
            name: (identifier_pattern_name)))
        body: (block
          (identifier))))))

==================
application
==================

a(1)(1)
+(1)
a(?, 1)
+ 1
1 `a` -b()
a(...(a, b))

---

(program
  (application
    value: (application
      value: (identifier)
    arguments: (arguments
      (argument
        value: (number))))
  arguments: (arguments
      (argument
        value: (number))))
  (prefix_application
    value: (identifier)
    argument: (number))
  (application
    value: (identifier)
    arguments: (arguments
      (argument)
      (argument
        value: (number))))
  (prefix_application
    value: (identifier)
    argument: (number))
  (infix_application
    left: (number)
    value: (identifier)
    right: (prefix_application
      value: (identifier)
      argument: (application
        value: (identifier)
        arguments: (arguments))))
  (application
    value: (identifier)
    arguments: (arguments
      (argument
        value: (spread_tuple
          value: (tuple
            (identifier)
            (identifier)))))))

==================
prefix application
==================

!false
+1
-1
~1

---

(program
  (prefix_application
    value: (identifier)
    argument: (boolean))
  (prefix_application
    value: (identifier)
    argument: (number))
  (prefix_application
    value: (identifier)
    argument: (number))
  (prefix_application
    value: (identifier)
    argument: (number)))

==================
infix application
==================

1 .. 1
1 ^ 1
1 * 1
1 / 1
1 + 1
1 - 1
1 % 1
1 < 1
1 <= 1
1 > 1
1 >= 1
1 == 1
1 != 1
a === 1
1 !== b
a ~ b
false && false
false || false
false ==> true <=> true
false && false || false
false || false && false
1 + 1 % 1
1 - 1 + 1
1 - -1
1 * 1 / 1 - 1
false || !false
(a.b) . c ^ 1 . (d.e)

---

(program
  (infix_application
    left: (number)
    value: (identifier)
    right: (number))
  (infix_application
    left: (number)
    value: (identifier)
    right: (number))
  (infix_application
    left: (number)
    value: (identifier)
    right: (number))
  (infix_application
    left: (number)
    value: (identifier)
    right: (number))
  (infix_application
    left: (number)
    value: (identifier)
    right: (number))
  (infix_application
    left: (number)
    value: (identifier)
    right: (number))
  (infix_application
    left: (number)
    value: (identifier)
    right: (number))
  (infix_application
    left: (number)
    value: (identifier)
    right: (number))
  (infix_application
    left: (number)
    value: (identifier)
    right: (number))
  (infix_application
    left: (number)
    value: (identifier)
    right: (number))
  (infix_application
    left: (number)
    value: (identifier)
    right: (number))
  (infix_application
    left: (number)
    value: (identifier)
    right: (number))
  (infix_application
    left: (number)
    value: (identifier)
    right: (number))
  (infix_application
    left: (identifier)
    value: (identifier)
    right: (number))
  (infix_application
    left: (number)
    value: (identifier)
    right: (identifier))
  (infix_application
    left: (identifier)
    value: (identifier)
    right: (identifier))
  (infix_application
    left: (boolean)
    value: (identifier)
    right: (boolean))
  (infix_application
    left: (boolean)
    value: (identifier)
    right: (boolean))
  (infix_application
    left: (infix_application
      left: (boolean)
      value: (identifier)
      right: (boolean))
    value: (identifier)
    right: (boolean))
  (infix_application
    left: (infix_application
      left: (boolean)
      value: (identifier)
      right: (boolean))
    value: (identifier)
    right: (boolean))
  (infix_application
    left: (boolean)
    value: (identifier)
    right: (infix_application
      left: (boolean)
      value: (identifier)
      right: (boolean)))
  (infix_application
    left: (infix_application
      left: (number)
      value: (identifier)
      right: (number))
    value: (identifier)
    right: (number))
  (infix_application
    left: (infix_application
      left: (number)
      value: (identifier)
      right: (number))
    value: (identifier)
    right: (number))
  (infix_application
    left: (number)
    value: (identifier)
    right: (prefix_application
      value: (identifier)
      argument: (number)))
  (infix_application
    left: (infix_application
      left: (infix_application
        left: (number)
        value: (identifier)
        right: (number))
      value: (identifier)
      right: (number))
    value: (identifier)
    right: (number))
  (infix_application
    left: (boolean)
    value: (identifier)
    right: (prefix_application
      value: (identifier)
      argument: (boolean)))
  (infix_application
    left: (pipeline
      argument: (pipeline
        argument: (identifier)
        value: (identifier))
      value: (identifier))
    value: (identifier)
    right: (pipeline
      argument: (number)
      value: (pipeline
        argument: (identifier)
        value: (identifier)))))

==================
pipeline
==================

a.b.c(1)

---

(program
  (application
    value: (pipeline
      argument: (pipeline
        argument: (identifier)
        value: (identifier))
      value: (identifier))
    arguments: (arguments
      (argument
        value: (number)))))

==================
access
==================

a[0]
A->b(1)
a.b[c]

---

(program
  (access
      value: (identifier)
      accessor: (number))
  (application
    value: (access
      value: (type)
      accessor: (shorthand_access_identifier))
    arguments: (arguments
      (argument
        value: (number))))
  (pipeline
    argument: (identifier)
    value: (access
      value: (identifier)
      accessor: (identifier))))

==================
assignment
==================

a :: Type := 1
a := (a :: Type) =>
  1

---

(program
  (assignment
    pattern: (identifier_pattern
      name: (identifier_pattern_name)
      type: (type_constructor
        (type)))
    value: (number))
  (assignment
    pattern: (identifier_pattern
      name: (identifier_pattern_name))
    value: (abstraction
      (abstraction_branch
        parameters: (parameters
          (identifier_pattern
            name: (identifier_pattern_name)
            type: (type_constructor
              (type))))
        body: (block
          (number))))))

==================
import
==================

import {
  a: b,
  c,
  a: b :: Type,
  c :: Type,
  Type: Type,
  Type
} from 'source'

---

(program
  (import
    clause: (import_clause
      (import_clause_identifier_pair
        name: (identifier_pattern_name)
        as: (identifier_pattern
          name: (identifier_pattern_name)))
      (identifier_pattern
        name: (identifier_pattern_name))
      (import_clause_identifier_pair
        name: (identifier_pattern_name)
        as: (identifier_pattern
          name: (identifier_pattern_name)
          type: (type_constructor
            (type))))
      (identifier_pattern
        name: (identifier_pattern_name)
        type: (type_constructor
            (type)))
      (import_clause_type_pair
        name: (type)
        as: (type))
      (type))
    source: (string_pattern)))

==================
export
==================

export a := 1
export module A
  export a := 1

---

(program
  (export
    declaration: (assignment
      pattern: (identifier_pattern
        name: (identifier_pattern_name))
      value: (number)))
  (export
    declaration: (module
      name: (type)
      body: (block
        (export
          declaration: (assignment
            pattern: (identifier_pattern
              name: (identifier_pattern_name))
            value: (number)))))))

==================
return
==================

return 1
return (a :: Type) =>
  1

---

(program
  (return
    value: (number))
  (return
    value: (abstraction
      (abstraction_branch
        parameters: (parameters
          (identifier_pattern
            name: (identifier_pattern_name)
            type: (type_constructor
              (type))))
        body: (block
          (number))))))

==================
if
==================

if false
  1
if true
  1
else
  1
a :=
  if true
    1
  else if false then 1
  else if true
    1

fn(if false then 1)
if true then 1 else 1

---

(program
  (if
    condition: (boolean)
    consequence: (block
      (number)))
  (if
    condition: (boolean)
    consequence: (block
      (number))
    alternative: (block
      (number)))
  (assignment
    pattern: (identifier_pattern
      name: (identifier_pattern_name))
    value: (if
      condition: (boolean)
      consequence: (block
        (number))
      alternatives: (else_if_clauses
        (else_if_clause
          condition: (boolean)
          consequence: (block
            (number)))
        (else_if_clause
          condition: (boolean)
          consequence: (block
            (number))))))
  (application
    value: (identifier)
    arguments: (arguments
      (argument
        value: (if
          condition: (boolean)
          consequence: (block
            (number))))))
  (if
    condition: (boolean)
    consequence: (block
      (number))
    alternative: (block
      (number))))

==================
case
==================

a := case a
     when 1
       1

case a
when [1, a :: Type]
  a
when 1, 1 then 1
else 1

---

(program
  (assignment
    pattern: (identifier_pattern
      name: (identifier_pattern_name))
    value: (case
      value: (identifier)
      branches: (when_clauses
        (when_clause
          values: (pattern_list
            (number))
          consequence: (block
            (number))))))
  (case
    value: (identifier)
    branches: (when_clauses
      (when_clause
        values: (pattern_list
          (list_pattern
            (number)
            (identifier_pattern
              name: (identifier_pattern_name)
              type: (type_constructor
                (type)))))
        consequence: (block
          (identifier)))
      (when_clause
        values: (pattern_list
          (number)
          (number))
        consequence: (block
          (number))))
    default: (block
      (number))))

==================
module
==================

module Type
  a := 1
module Type where a := 1

---

(program
  (module
    name: (type)
    body: (block
      (assignment
        pattern: (identifier_pattern
          name: (identifier_pattern_name))
        value: (number))))
  (module
    name: (type)
    body: (block
      (assignment
        pattern: (identifier_pattern
          name: (identifier_pattern_name))
        value: (number)))))

==================
list comprehension
==================

[i * 2 | i in 1..10]
[i / 2 | i in 1..10 if i % 2 == 0]
[[x, y] | x in 1..10 if x % 2 == 0, y in 1..10 if i % 2 == 0]

---

(program
  (list_comprehension
    body: (block
      (infix_application
        left: (identifier)
        value: (identifier)
        right: (number)))
    generators: (generators
      (generator
        name: (identifier_pattern_name)
        value: (infix_application
          left: (number)
          value: (identifier)
          right: (number)))))
  (list_comprehension
    body: (block
      (infix_application
        left: (identifier)
        value: (identifier)
        right: (number)))
    generators: (generators
      (generator
        name: (identifier_pattern_name)
        value: (infix_application
          left: (number)
          value: (identifier)
          right: (number))
        condition: (infix_application
          left: (infix_application
            left: (identifier)
            value: (identifier)
            right: (number))
          value: (identifier)
          right: (number)))))
  (list_comprehension
    body: (block
      (list
        (identifier)
        (identifier)))
    generators: (generators
      (generator
        name: (identifier_pattern_name)
        value: (infix_application
          left: (number)
          value: (identifier)
          right: (number))
        condition: (infix_application
          left: (infix_application
            left: (identifier)
            value: (identifier)
            right: (number))
          value: (identifier)
          right: (number)))
      (generator
        name: (identifier_pattern_name)
        value: (infix_application
          left: (number)
          value: (identifier)
          right: (number))
        condition: (infix_application
          left: (infix_application
            left: (identifier)
            value: (identifier)
            right: (number))
          value: (identifier)
          right: (number))))))
