==================
abstraction
==================

(a, b) => a
(a, b, 1, {c = 1}, ...d) => a

fib :=
  (0) =>
      0
  (1) => 1
  (n = 2) =>
      fib(n - 1) + fib(n - 2)

(a) =>
  b := (c) =>
    c
  b(1)

---

(program
  (abstraction
    (abstraction_branch
      parameters: (parameters
        (pattern
            name: (identifier_pattern))
        (pattern
            name: (identifier_pattern)))
      body: (identifier)))
  (abstraction
    (abstraction_branch
      parameters: (parameters
        (pattern
            name: (identifier_pattern))
        (pattern
            name: (identifier_pattern))
        (pattern
            value: (number))
        (pattern
          pattern: (map_pattern
            (shorthand_pair_identifier_pattern
              name: (identifier_pattern)
              value: (number))))
        (rest_list
          name: (identifier_pattern)))
      body: (identifier)))
  (assignment
    left: (identifier_pattern)
    right: (abstraction
      (abstraction_branch
        parameters: (parameters
          (pattern
            value: (number)))
        body: (block
          (number)))
      (abstraction_branch
        parameters: (parameters
          (pattern
            value: (number)))
        body: (block
          (number)))
      (abstraction_branch
        parameters: (parameters
          (pattern
            name: (identifier_pattern)
            value: (number)))
        body: (block
          (infix_application
            left: (application
              abstraction: (identifier)
              arguments: (arguments
                (argument
                  value: (infix_application
                    left: (identifier)
                    abstraction: (infix_application_operator)
                    right: (number)))))
            abstraction: (infix_application_operator)
            right: (application
              abstraction: (identifier)
              arguments: (arguments
                (argument
                  value: (infix_application
                    left: (identifier)
                    abstraction: (infix_application_operator)
                    right: (number))))))))))
  (abstraction
    (abstraction_branch
      parameters: (parameters
        (pattern
          name: (identifier_pattern)))
      body: (block
        (assignment
          left: (identifier_pattern)
          right: (abstraction
            (abstraction_branch
              parameters: (parameters
                (pattern
                  name: (identifier_pattern)))
              body: (block
                (identifier)))))
        (application
          abstraction: (identifier)
          arguments: (arguments
            (argument
              value: (number))))))))

==================
application
==================

a(1)(1)
+(1)
a(?, 1)
+ 1
a 1
1 `a` -b(1)

---

(program
  (application
    abstraction: (application
      abstraction: (identifier)
    arguments: (arguments
      (argument
        value: (number))))
  arguments: (arguments
      (argument
        value: (number))))
  (application
    abstraction: (identifier)
  arguments: (arguments
      (argument
        value: (number))))
  (application
    abstraction: (identifier)
    arguments: (arguments
      (argument)
      (argument
        value: (number))))
  (prefix_application
    abstraction: (identifier)
    argument: (number))
  (prefix_application
    abstraction: (identifier)
    argument: (number))
  (infix_application
    left: (number)
    abstraction: (infix_application_operator)
    right: (prefix_application
      abstraction: (identifier)
      argument: (application
        abstraction: (identifier)
        arguments: (arguments
          (argument
            value: (number)))))))

==================
prefix application
==================

!false
+1
-1
~1

---

(program
  (prefix_application
    abstraction: (identifier)
    argument: (boolean))
  (prefix_application
    abstraction: (identifier)
    argument: (number))
  (prefix_application
    abstraction: (identifier)
    argument: (number))
  (prefix_application
    abstraction: (identifier)
    argument: (number)))

==================
infix application
==================

1 .. 1
1 ^ 1
1 * 1
1 / 1
1 + 1
1 - 1
1 % 1
1 < 1
1 <= 1
1 > 1
1 >= 1
1 == 1
1 != 1
a === 1
1 !== b
a ~ b
false && false
false || false
false ==> true <=> true
false && false || false
false || false && false
1 - 1 + 1
1 - -1
1 * 1 / 1 - 1
false || !false
(a.b) . c ^ 1 . (d.e)

---

(program
  (infix_application
    left: (number)
    abstraction: (infix_application_operator)
    right: (number))
  (infix_application
    left: (number)
    abstraction: (infix_application_operator)
    right: (number))
  (infix_application
    left: (number)
    abstraction: (infix_application_operator)
    right: (number))
  (infix_application
    left: (number)
    abstraction: (infix_application_operator)
    right: (number))
  (infix_application
    left: (number)
    abstraction: (infix_application_operator)
    right: (number))
  (infix_application
    left: (number)
    abstraction: (infix_application_operator)
    right: (number))
  (infix_application
    left: (number)
    abstraction: (infix_application_operator)
    right: (number))
  (infix_application
    left: (number)
    abstraction: (infix_application_operator)
    right: (number))
  (infix_application
    left: (number)
    abstraction: (infix_application_operator)
    right: (number))
  (infix_application
    left: (number)
    abstraction: (infix_application_operator)
    right: (number))
  (infix_application
    left: (number)
    abstraction: (infix_application_operator)
    right: (number))
  (infix_application
    left: (number)
    abstraction: (infix_application_operator)
    right: (number))
  (infix_application
    left: (number)
    abstraction: (infix_application_operator)
    right: (number))
  (infix_application
    left: (identifier)
    abstraction: (infix_application_operator)
    right: (number))
  (infix_application
    left: (number)
    abstraction: (infix_application_operator)
    right: (identifier))
  (infix_application
    left: (identifier)
    abstraction: (infix_application_operator)
    right: (identifier))
  (infix_application
    left: (boolean)
    abstraction: (infix_application_operator)
    right: (boolean))
  (infix_application
    left: (boolean)
    abstraction: (infix_application_operator)
    right: (boolean))
  (infix_application
    left: (infix_application
      left: (boolean)
      abstraction: (infix_application_operator)
      right: (boolean))
    abstraction: (infix_application_operator)
    right: (boolean))
  (infix_application
    left: (infix_application
      left: (boolean)
      abstraction: (infix_application_operator)
      right: (boolean))
    abstraction: (infix_application_operator)
    right: (boolean))
  (infix_application
    left: (boolean)
    abstraction: (infix_application_operator)
    right: (infix_application
      left: (boolean)
      abstraction: (infix_application_operator)
      right: (boolean)))
  (infix_application
    left: (infix_application
      left: (number)
      abstraction: (infix_application_operator)
      right: (number))
    abstraction: (infix_application_operator)
    right: (number))
  (infix_application
    left: (number)
    abstraction: (infix_application_operator)
    right: (prefix_application
      abstraction: (identifier)
      argument: (number)))
  (infix_application
    left: (infix_application
      left: (infix_application
        left: (number)
        abstraction: (infix_application_operator)
        right: (number))
      abstraction: (infix_application_operator)
      right: (number))
    abstraction: (infix_application_operator)
    right: (number))
  (infix_application
    left: (boolean)
    abstraction: (infix_application_operator)
    right: (prefix_application
      abstraction: (identifier)
      argument: (boolean)))
  (infix_application
    left: (pipeline
      left: (pipeline
        left: (identifier)
        right: (identifier))
      right: (identifier))
    abstraction: (infix_application_operator)
    right: (pipeline
      left: (number)
      right: (pipeline
        left: (identifier)
        right: (identifier)))))

==================
pipeline
==================

a.b.c(1)

---

(program
  (application
    abstraction: (pipeline
      left: (pipeline
        left: (identifier)
        right: (identifier))
      right: (identifier))
    arguments: (arguments
      (argument
        value: (number)))))

==================
assignment
==================

a := 1
a := (a) =>
  1

---

(program
  (assignment
    left: (identifier_pattern)
    right: (number))
  (assignment
    left: (identifier_pattern)
    right: (abstraction
      (abstraction_branch
        parameters: (parameters
          (pattern
            name: (identifier_pattern)))
        body: (block
          (number))))))

==================
return
==================

return 1
return (a) =>
  1

---

(program
  (return
    value: (number))
  (return
    value: (abstraction
      (abstraction_branch
        parameters: (parameters
          (pattern
            name: (identifier_pattern)))
        body: (number)))))

==================
if
==================

if false then
  1
if true then
  1
else
  1
if true then
  1
else if false then 1
else if true then
  1

if false then 1
if true then 1 else 1

---

(program
  (if
    condition: (boolean)
    consequence: (block
      (number)))
  (if
    condition: (boolean)
    consequence: (block
      (number))
    alternative: (block
      (number)))
  (if
    condition: (boolean)
    consequence: (block
      (number))
    alternatives: (else_if_clauses
      (else_if_clause
        condition: (boolean)
        consequence: (block
          (number)))
      (else_if_clause
        condition: (boolean)
        consequence: (block
          (number)))))
  (if
    condition: (boolean)
    consequence: (block
      (number)))
  (if
    condition: (boolean)
    consequence: (number)
    alternative: (number)))
